enum Report {
    Approve,   //确认删除内容，会产生drip
    Disapprove,   //拒绝
    Ignore     //忽略，会产生drip
}  



call 方法：
report_confirm
{
    hierarchies: [{
        target_hash: String,
        account_id: String
    }],
    report: Report
}



enum MsgInput {
    Report(ReportInput),
    RevokeReport(ReportInput)        //撤销report
    Deposit(Deposit)
}

enum Deposit {
    FT(AccountId),
    NFT(AccountId),
    Drip(AccountId)    //对于report来说只用drip
}

struct ReportInput {
    hierarchies: [{
        target_hash: String,
        account_id: String
    }],
    reason: String
}


drip合约方法：
1.report
前端调用：
ft_deposit_call
{
    receiver_id: AccountId,
    contract_id: AccountId,
    amount: U128,                       //字符串
    msg: String,                        //序列化后的MsgInput
}

indexer抓：
这个方法是一个通用方法，只能靠msg来区分他的功能
ft_on_deposit
{
    owner_id: AccountId,     //要deposit发起者
    contract_id: AccountId,   //deposit的是哪个社区的drip, 一般为当前社区
    amount: U128,
    msg: String              //序列化后的MsgInput
}

扣钱抓：
ft_resolve_deposit
{
    owner_id: AccountId,      //发起者
    receiver_id: AccountId,   //存入的社区
    contract_id: AccountId,   //存入的哪个社区的drip, 一般同上
    amount: U128, 
}

1.撤销report
前端调用：
ft_withdraw_call
{
    receiver_id: AccountId,
    contract_id: AccountId,
    amount: U128,                       //字符串
    msg: String,                        //序列化后的MsgInput，此时用的是RevokeReport
}

indexer抓：
这个方法是一个通用方法，只能靠msg来区分他的功能
ft_on_withdraw
{
    owner_id: AccountId,     //withdraw发起者
    contract_id: AccountId,   //withdraw的是哪个社区的drip, 一般为当前社区
    amount: U128,
    msg: String              //序列化后的MsgInput
}

赎回抓：
ft_resolve_withdraw
{
    owner_id: AccountId,
    receiver_id: AccountId,
    contract_id: AccountId,
    amount: U128,
}