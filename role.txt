不区分RoleKind,
多了一个global_state，是一个单独的身份组
定义如下：
HashMap<Permission, (Relationship, Option<Access>>)), //permission表, relationship为or或者and, 每条permission去和普通身份组中的permission去做逻辑运算, access为是否通过drips数量来判断用户有没有权限

对于目前的产品来说，
1.当前端用户选择owner only发帖的话, global role的权限有
Or Like之类的最基础权限
去掉addContent(0)
And 管理类权限

2.当前端用户选择whitelist only发帖的话, global role的权限有
Or Like之类的最基础权限
And 管理类权限
添加And addContent(0)

3.当前端用户选择all发帖的话, global role的权限有
Or Like之类的最基础权限
And 管理类权限
添加Or addContent(0)

接口看下面的set_global_role



enum Permission {
    AddContent(u8),   //hierarchy level count of content 假设只能发评论，那么需要将身份组权限加入AddContent(1)和AddContent(2)
    DelContent,       //是否能删除自己发的内容
    AddEncryptContent(u8),   //hierarchy level count of encrypt content  同AddContent
    DelEncryptContent,  //同AddContent
    Like,             //此处点赞和取消点赞分开了，但目前默认都要加上
    Unlike,
    Share,
    Report,
    //默认情况下普通all成员都有上面的权限


    ReportConfirm,       //管理员处理举报权限
    DelOthersContent,    //删除别人帖子
    SetRole(Option<String>),   
    //参数为要指定的身份组名字，当SetRole不带参数时，可以管理所有低于当前身份组管理等级的身份组，指定时，假设被指定的身份组管理等级高于此身份组则无效，
    //管理内容为权限，管理层级和权限覆盖层级，并且管理层级只能设置为小于此管理员的管理层级，如果是access limit类的身份组，则可改变加入身份组规则
    DelRole(Option<String>),   //同上
    AddMember(Option<String>), //规则类似于setroe和delrole，但只能管理group类身份组的成员
    RemoveMember(Option<String>),
    Other(String)   //off-chain permission  
    //Other(”ManageInfo”) 管理社区信息
    //Other(”ManagePin”)  管理社区置顶
    //Other(”ManageBenefits”) 管理benefits
    //Other(”ManageNews”) 管理news
    //Other(”ManageRules”) 管理社区rules
}

社区创建时默认有1个身份组: "ban"


call 方法：
set_global_role
{
    permissions: [Permission],    
    options: [["Or" || "And", Access || null]]    
    //两个数组一一对应
}
//举例： 
{"addContent: 0": ["Or", access: {
            conditions: [{
                FTCondition: {
                    token_id: String,
                    contract_id: String, 
                    amount_to_access: String,
                }
            }], 
            relationship: 
            enum {
                Or: 0,
                And: 1
            }
        }, ]}

add_role
{
    alias: String, //创建后可更改, 前端只显示alias
    kind: RoleKindInput, 
    permissions: [Permission], 
    mod_level: u32,    //管理等级，有SetRole或者DelRole并且等级大于要被管理的身份组才能有效
    override_level: u32  //权限覆盖等级，目前仅限于黑名单
}
return hash: String

set_role
{
    hash: String, 
    alias: Option<String>,
    kind: Option<RoleKindInput>,     //只可以用于access更改
    permissions: Option<Vec<Permission>>, 
    mod_level: Option<u32>, 
    override_level: Option<u32>
}
remove_role
{
    hash: String
}

add_member_to_role
{
    hash: String, 
    members: [(AccountId, Option<HashMap<String, String>>)]  //里面是元组  元组第一个是账号名，第二个是Object 目前key只有until，代表这个成员能在这个身份组里能待到什么时候
}
remove_member_from_role
{
    hash: String, 
    members: [AccountId]
}

